package dataStructure.dataManagement.arrayVSlist;

// https://hyeonstorage.tistory.com/258?category=578561

/**
 * 
 * @author shkim
 * 
 * # Java 배열(array)과 리스트(list) 비교
 * 
 * 1. 배열을 이용한 구현
 * 
 *   - int[] array = new int[5];
 *   
 *   - 배열을 이용하여 리스트(list)를 구현할때의 가장 큰 장점은 쉽게 구현할 수 있다는 점이다. 
 *   - 배열은 내부 인덱스를 가지고 데이터에 접근할 수 있으므로 인덱스의 번호가 곧 데이터들의 순서를 의미한다.
 *   - 그렇기 때문에 데이터 삽입시 순차적으로 인덱스 값을 증가시키면서 저장하면 된다.
 *   - 또한 데이터를 검색 할 때에도 인덱스를 가지고 직접 접근하여 빠르게 찾을 수 있다.
 *   
 *   - 그리고 배열은 항상 인덱스 0부터 시작하기 때문에 첫 데이터를 쉽게 찾을 수 있다.
 *   - 저장된 데이터의 수만 따로 관리하면 마지막 데이터도 쉽게 찾을 수 있다.
 *   - 따라서 스택이나 큐의 구현도 쉽게 할 수 있다.
 *   
 *   
 *   - 하지만 배열을 이용한 리스트(list)의 구현은 몇가지 단점을 가지고 있다.
 *   
 *   - 배열은 생성할때 지정한 크기를 바꿀 수 없다.
 *   - 그래서 초기에 너무 큰 크기로 생성했을 경우 불필요한 메모리의 낭비가 발생한다.
 *   - 또한 저장할 데이터보다 작은 크기로 생성했을 경우에는 데이터를 다 저장할 수 없다.
 *   
 *   - 이를 해결하기 위해 배열의 사이즈보다 많은 데이터를 담으려고 할 경우 크기가 더 큰 배열을 새로 생성하여 처리하도록 할 수 있다.
 *   - 하지만 배열을 새로 생성하여 이전의 데이터를 모두 복사하는 작업을 수행해야 한다.
 *   - 그러므로 상당한 연산량이 필요하게 된다.
 *   
 *   - 또한 데이터를 삽입하거나 삭제했을 경우 뒤의 데이터들을 모두 한칸씩 밀어주거나 앞으로 당겨주는 작업을 해야 한다.
 *   - 그렇기 때문에 삽입/삭제 작업이 발생할 경우 평균적으로 '데이터의수/2' 만큼의 이동이 추가적으로 발생하게 된다.
 *   
 *   - 이처럼 쉽게 구현할 수 있고 빠른 검색기능을 가지고 있다.
 *   - 하지만 저장될 데이터의 수를 가늠하기 어렵거나 삽입과 삭제에 걸리는 시간 때문에 일반적으로 배열보다는 '연결 리스트'를 많이 사용한다.
 *   
 *   
 * 2. 연결 리스트를 이용한 구현
 * 
 *   - 연결 리스트(linked list)는 리스트 구현의 한 방법이다.
 *   - 일정한 순서를 가지는 자료들의 저장과 탐색을 효과적으로 관리하기 위하여 
 *     각 데이터 요소들에 이전데이터나 다음데이터를 가리키는 참조를 추가적으로 부여하여 
 *     자료들을 연결하는 방법을 말한다.
 *     
 *   - 배열처럼 각 자료에 대하여 직접 인덱스를 부여하지 않고 
 *     이전 데이터나 다음 데이터에 대한 참조만 가지고 있으므로 
 *     데이터를 추가하거나 삭제시 연관된 모든 데이터의 인덱스를 변경할 필요 없이 
 *     이전데이터와 다음데이터에 대한 참조만 변경하면 되므로 효율적으로 동작할 수 있다.
 *     
 *     
 * 2.1 노드(node)
 * 
 *   - 각 자료는 이전 데이터나 다음 데이터에 대한 참조를 가져야 하므로 
 *     연결 리스트에 저장되는 데이터는 원본 데이터와 다른 데이터에 대한 참조를 표현한 구조여야 하며 
 *     이를 '노드(node)'라고 부른다. 
 *   - 즉 연결 리스트는 노드와 노드의 연결로 이루어진 자료구조인 셈이다.
 *   
 * 2.2 연결 리스트의 종류
 * 
 *   2.2.1 단순 연결 리스트 (simple linked list)
 *     - 각 자료 요소들이 다음 데이터에 대한 참조를 가지고 있는 경우
 *     
 *   2.2.2 이중 말단 연결 리스트 (double ended linked list)
 *     - 단순 연결 리스트의 마지막 자료에 대한 참조를 추가한 구조
 *     
 *   2.2.3 이중 연결 리스트 (doubly linked list)
 *     - 이전 데이터와 다음 데이터에 대한 참조를 모두 추가한 구조
 *
 */

public class ArrayVSList {

}
