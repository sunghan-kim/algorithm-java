package programmers.stackAndQueue.problem.level2;

import java.util.Arrays;
import java.util.HashMap;

import programmers.stackAndQueue.problem.level2.solution.printer.DeveloperDK;
import programmers.stackAndQueue.problem.level2.solution.printer.HMYK;
import programmers.stackAndQueue.problem.level2.solution.printer.Junam;
import programmers.stackAndQueue.problem.level2.solution.printer.Programmers;

// https://programmers.co.kr/learn/courses/30/lessons/42587

/**
* 
* @author shkim
* 
* ##### 프린터 #####
* 
* # 문제 설명
* 
* 일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 
* 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 
* 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 
* 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.
* 
*   1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
*   2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
*   3. 그렇지 않으면 J를 인쇄합니다.
*   
* 예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 
* 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.
* 
* 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 
* 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.
* 
* 현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 
* 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 
* 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.
* 
* 
* # 제한 사항
* 
*  - 현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
*  - 인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.
*  - location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.
* 
* 
* # 입출력 예
* 
* (예시1)
* 
*   - priorities : [2, 1, 3, 2]
*   - location : 2
*   
*   - return : 1
*   
*   - 문제에 나온 예와 같다.
*   
* (예시2)
*   
*   - priorities : [1, 1, 9, 1, 1, 1]
*   - location : 0
*   
*   - return : 5
*   
*   - 6개의 문서(A,B,C,D,E,F)가 인쇄 대기목록에 있고
*     중요도가 119111 이므로 C D E F A B순으로 인쇄한다.
*   
*/

public class Printer {

	
	/**
	 * 
	 * My Solution
	 * 
	 *  - 제출 결과 : 실패...
	 * 
	 * @param priorities
	 * @param location
	 * @return
	 */
	public int solution(int[] priorities, int location) {
        int answer = 0;
        
        int[] order = new int[priorities.length];
        
        for (int i=0; i < priorities.length; i++) {
        	
        	order[i] = i+1;
        	
        }
        
        resetOrder(priorities, order, 0);
        
        answer = order[location];
        
        return answer;
    }
	
	public void resetOrder(int[] priorities, int[] order, int sIndex) {
		
		boolean check = false;
		
		for (int i=sIndex+1; i < priorities.length; i++) {
			
			if (priorities[sIndex] < priorities[i]) {
				
				check = true;
				
			}
		
		}
		
		if (check) {
			
			int temp1 = priorities[sIndex];
			
			
			for (int i=sIndex; i < priorities.length-1; i++) {
				
				priorities[i] = priorities[i+1];
				
			}
			
			priorities[priorities.length-1] = temp1;
			
			
			int temp2 = order[order.length-1];
			
			for (int j=order.length-1; j > sIndex; j--) {
				
				order[j] = order[j-1];
				
			}
			
			order[sIndex] = temp2;
			
			resetOrder(priorities, order, sIndex);
			
		} else {
			
			if (sIndex+1 < priorities.length) {
				resetOrder(priorities, order, sIndex+1);
			}
			
		}
		
	}
	
	public static void main(String[] args) {
		
		int[] priorities1 = {2, 1, 3, 2};
		int location1 = 2;
		
		int[] priorities2 = {1, 1, 9, 1, 1, 1};
		int location2 = 0;
		
		int answer1 = 0; // 1
		int answer2 = 0; // 5
		
		String show = "dk"; // default, junam, pg01, hmyk, dk
		
		if (show.equals("default")) {
			
			Printer p = new Printer();
			
			answer1 = p.solution(priorities1, location1);
			answer2 = p.solution(priorities2, location2);
			
		} else if (show.equals("junam")) {
			
			Junam jn = new Junam();
			
			answer1 = jn.solution(priorities1, location1);
			answer2 = jn.solution(priorities2, location2);
			
		} else if (show.equals("pg01")) {
			
			Programmers pg = new Programmers();
			
			answer1 = pg.solution1(priorities1, location1);
			answer2 = pg.solution1(priorities2, location2);
			
		} else if (show.equals("hmyk")) {
			
			HMYK hmyk = new HMYK();
			
			answer1 = hmyk.solution(priorities1, location1);
			answer2 = hmyk.solution(priorities2, location2);
			
		} else if (show.equals("dk")) {
			
			DeveloperDK dk = new DeveloperDK();
			
			answer1 = dk.solution(priorities1, location1);
			answer2 = dk.solution(priorities2, location2);
			
		}
		
		System.out.println("answer1 : " + answer1); // 1
		System.out.println("answer2 : " + answer2); // 5
		
		
	}
	
}
